-- CREATE DATABASE MEDICAL4U;
USE MEDICAL4U;


DROP PROCEDURE IF EXISTS GetUserGroups;
DROP PROCEDURE IF EXISTS GetDepartments;
DROP PROCEDURE IF EXISTS GetDepartment;
DROP PROCEDURE IF EXISTS PostDepartment;
DROP PROCEDURE IF EXISTS PutDepartment;
DROP PROCEDURE IF EXISTS GetUsers;
DROP PROCEDURE IF EXISTS GetUser;
DROP PROCEDURE IF EXISTS PostUser;
DROP PROCEDURE IF EXISTS PutUser;
DROP PROCEDURE IF EXISTS GetSpecialties;
DROP PROCEDURE IF EXISTS GetSpecialty;
DROP PROCEDURE IF EXISTS PostSpecialty;
DROP PROCEDURE IF EXISTS PutSpecialty;
DROP PROCEDURE IF EXISTS GetStates;
DROP PROCEDURE IF EXISTS GetLocations;
DROP PROCEDURE IF EXISTS GetLocation;
DROP PROCEDURE IF EXISTS PostLocation;
DROP PROCEDURE IF EXISTS PutLocation;
DROP PROCEDURE IF EXISTS GetRooms;
DROP PROCEDURE IF EXISTS GetRoom;
DROP PROCEDURE IF EXISTS PostRoom;
DROP PROCEDURE IF EXISTS PutRoom;
DROP PROCEDURE IF EXISTS GetDoctorLocations;
DROP PROCEDURE IF EXISTS SetDoctorLocations;
DROP PROCEDURE IF EXISTS PostDoctor;
DROP PROCEDURE IF EXISTS PutDoctor;
DROP PROCEDURE IF EXISTS SetDoctorSpecialties;
DROP PROCEDURE IF EXISTS GetAddresses;
DROP PROCEDURE IF EXISTS GetDoctorSpecialties;
DROP PROCEDURE IF EXISTS GetSpecialtiesByDOCID;
DROP PROCEDURE IF EXISTS GetDoctors;
DROP PROCEDURE IF EXISTS GetDoctor;
DROP PROCEDURE IF EXISTS GetPatients;
DROP PROCEDURE IF EXISTS GetPatient;
DROP PROCEDURE IF EXISTS PostPatient;
DROP PROCEDURE IF EXISTS PutPatient;
DROP PROCEDURE IF EXISTS GetBloodTypes;
DROP PROCEDURE IF EXISTS GetProviders;
DROP PROCEDURE IF EXISTS GetDoctorByName;
DROP PROCEDURE IF EXISTS GetPatientByName;
DROP PROCEDURE IF EXISTS GetPatientByPhone;
DROP PROCEDURE IF EXISTS GetRoomsByLocID;
DROP PROCEDURE IF EXISTS GetSchedule;
DROP PROCEDURE IF EXISTS GetSchedules;
DROP PROCEDURE IF EXISTS GetSchedulesForPatient;
DROP PROCEDURE IF EXISTS GetSchedulesForStaff;
DROP PROCEDURE IF EXISTS PostSchedule;
DROP PROCEDURE IF EXISTS PutSchedule;

DELIMITER $$
CREATE PROCEDURE GetUserGroups()
BEGIN
	SELECT 
		GROUP_ID, GROUP_NAME, DESCRIPTION
	FROM
		USERGROUPS
	ORDER BY
		GROUP_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetDepartments()
BEGIN
	SELECT 
		DEPT_ID AS ID, DEPT_NAME AS NAME, DESCRIPTION AS `DESC`
	FROM
		DEPARTMENTS
	ORDER BY
		DEPT_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetDepartment(
    IN _DEPT_ID INT
)
BEGIN
	SELECT 
		DEPT_ID AS ID, DEPT_NAME AS NAME, DESCRIPTION AS `DESC`
	FROM
		DEPARTMENTS
	WHERE
		DEPT_ID = _DEPT_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PostDepartment(
	IN _DEPT_NAME VARCHAR(50),
    IN _DESCRIPTION VARCHAR(200),
    OUT _DEPT_ID INT
)
BEGIN
	INSERT INTO 
        DEPARTMENTS (DEPT_NAME, DESCRIPTION) 
    VALUES 
        (_DEPT_NAME, _DESCRIPTION);
    
    SELECT 
        LAST_INSERT_ID() INTO _DEPT_ID;
END $$
DELIMITER ;

-- DROP PROCEDURE PutDepartment;
DELIMITER $$
CREATE PROCEDURE PutDepartment(
	IN _DEPT_ID	INT,
	IN _DEPT_NAME VARCHAR(50),
    IN _DESCRIPTION VARCHAR(200)
)
BEGIN
	UPDATE 
		DEPARTMENTS 
	SET 
		DEPT_NAME = _DEPT_NAME,
		DESCRIPTION = _DESCRIPTION
	WHERE 
		DEPT_ID = _DEPT_ID;
END $$
DELIMITER ;

DELIMITER $$
CREATE PROCEDURE GetUsers()
BEGIN
	SELECT 
		U.USER_ID, U.FIRST_NAME, U.LAST_NAME, D.DEPT_NAME, U.USER_NAME, G.GROUP_NAME
	FROM
        USERS U
	INNER JOIN
		DEPARTMENTS D
	ON
		U.DEPT_ID = D.DEPT_ID
	INNER JOIN
		USERGROUPS G
	ON
		U.USER_GROUP = G.GROUP_ID
	ORDER BY
		U.USER_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetUser(
    IN _USER_ID INT
)
BEGIN
	SELECT 
		FIRST_NAME, LAST_NAME, DEPT_ID, USER_NAME, USER_GROUP
	FROM
		USERS
	WHERE
		USER_ID = _USER_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PostUser(
	IN _FIRST_NAME VARCHAR(50),
    IN _LAST_NAME VARCHAR(50),
    IN _DEPT_ID INT,
    IN _USER_NAME VARCHAR(40),
    IN _USER_PASSWORD VARCHAR(255),
    IN _USER_GROUP INT,
    OUT _USER_ID INT
)
BEGIN
	INSERT INTO 
        USERS (FIRST_NAME, LAST_NAME, DEPT_ID, USER_NAME, USER_PASSWORD, USER_GROUP)
    VALUES 
        (_FIRST_NAME, _LAST_NAME, _DEPT_ID, _USER_NAME, SHA(_USER_PASSWORD), _USER_GROUP);
        
	SELECT 
        LAST_INSERT_ID() INTO _USER_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PutUser(
    IN _USER_ID INT,
	IN _FIRST_NAME VARCHAR(50),
    IN _LAST_NAME VARCHAR(50),
    IN _DEPT_ID INT,
    IN _USER_NAME VARCHAR(40),
    IN _USER_PASSWORD VARCHAR(255),
    IN _USER_GROUP INT
)
BEGIN
	UPDATE 
		USERS 
    SET
		FIRST_NAME = _FIRST_NAME, 
        LAST_NAME = _LAST_NAME, 
        DEPT_ID = _DEPT_ID, 
        USER_NAME = _USER_NAME, 
        USER_PASSWORD = SHA(USER_PASSWORD),
        USER_GROUP = _USER_GROUP
    WHERE 
		USER_ID = _USER_ID;
END $$
DELIMITER ;
 
DELIMITER $$
CREATE PROCEDURE GetSpecialties()
BEGIN
	SELECT 
        SPECIALTIES_ID AS ID, SPECIALTIES_NAME AS NAME
    FROM 
        SPECIALTIES 
    ORDER BY 
        SPECIALTIES_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetSpecialty(
    IN _SPECIALTIES_ID INT
)
BEGIN
	SELECT 
        SPECIALTIES_ID AS ID, SPECIALTIES_NAME AS NAME
    FROM 
        SPECIALTIES 
    WHERE 
        SPECIALTIES_ID = _SPECIALTIES_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PostSpecialty(
	IN _SPECIALTIES_NAME VARCHAR(50),
    OUT _SPECIALTIES_ID INT
)
BEGIN
	INSERT INTO 
        SPECIALTIES (SPECIALTIES_NAME) 
    VALUES 
        (_SPECIALTIES_NAME);
    
    SELECT 
        LAST_INSERT_ID() INTO _SPECIALTIES_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PutSpecialty(
    IN _SPECIALTIES_ID INT,
	IN _SPECIALTIES_NAME VARCHAR(50)
)
BEGIN
	UPDATE SPECIALTIES 
	SET SPECIALTIES_NAME = _SPECIALTIES_NAME
	WHERE SPECIALTIES_ID = _SPECIALTIES_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetStates()
BEGIN
	SELECT 
        STATE_ID, CODE, NAME 
    FROM 
        STATES
    ORDER BY 
        STATE_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetLocations()
BEGIN
	SELECT 
		L.LOC_ID AS ID, L.LOC_NAME, L.CITY, S.CODE AS STATE, L.ADDRESS, L.ZIP 
	FROM 
		LOCATIONS L
	INNER JOIN
		STATES S
	ON
		L.STATE_ID = S.STATE_ID
	ORDER BY
		LOC_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetLocation(
    IN _LOC_ID INT
)
BEGIN
	SELECT 
        LOC_ID AS ID, LOC_NAME, CITY, STATE_ID AS STATE, ADDRESS, ZIP 
    FROM 
        LOCATIONS 
    WHERE 
        LOC_ID = _LOC_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PostLocation(
	IN _LOC_NAME VARCHAR(50),
    IN _CITY VARCHAR(20),
    IN _STATE_ID INT,
    IN _ADDRESS VARCHAR(30),
    IN _ZIP VARCHAR(10),
	OUT _LOC_ID INT
)
BEGIN
	INSERT INTO 
        LOCATIONS (LOC_NAME, ADDRESS, CITY, STATE_ID, ZIP) 
    VALUES
        (_LOC_NAME, _ADDRESS, _CITY, _STATE_ID, _ZIP);
        
	SELECT 
        LAST_INSERT_ID() INTO _LOC_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PutLocation(
	IN _LOC_ID INT,
    IN _LOC_NAME VARCHAR(50),
    IN _CITY VARCHAR(20),
    IN _STATE_ID INT,
    IN _ADDRESS VARCHAR(30),
    IN _ZIP VARCHAR(10)
)
BEGIN
	UPDATE 
        LOCATIONS
    SET 
		LOC_NAME = _LOC_NAME,
		ADDRESS = _ADDRESS, 
        CITY = _CITY, 
        STATE_ID = _STATE_ID, 
        ZIP = _ZIP
	WHERE
		LOC_ID = _LOC_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetRooms()
BEGIN
	SELECT 
		R.ROOM_ID AS ID, L.LOC_NAME, CONCAT(L.ADDRESS, ' ', L.CITY, ', ', S.CODE, ' ', L.ZIP) AS ADDRESS, R.ROOM_NUMBER AS ROOMNO
	FROM 
		ROOMS R
	INNER JOIN
		LOCATIONS L
	ON
		R.LOC_ID = L.LOC_ID
	INNER JOIN
		STATES S
	ON
		L.STATE_ID = S.STATE_ID
	ORDER BY
		ROOM_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetRoom(
    IN _ROOM_ID INT
)
BEGIN
	SELECT 
        ROOM_ID AS ID, LOC_ID AS LOCID, ROOM_NUMBER AS ROOMNO
    FROM 
        ROOMS 
    WHERE 
        ROOM_ID = _ROOM_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PostRoom(
    IN _LOC_ID INT,
    IN _ROOM_NUMBER VARCHAR(10),
	OUT _ROOM_ID INT
)
BEGIN
	INSERT INTO 
        ROOMS (LOC_ID, ROOM_NUMBER) 
    VALUES
        (_LOC_ID, _ROOM_NUMBER);
        
	SELECT 
        LAST_INSERT_ID() INTO _ROOM_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PutRoom(
	IN _ROOM_ID INT,
	IN _LOC_ID INT,
    IN _ROOM_NUMBER VARCHAR(10)
)
BEGIN
	UPDATE 
        ROOMS
    SET 
		LOC_ID = _LOC_ID, 
        ROOM_NUMBER = _ROOM_NUMBER
	WHERE
		ROOM_ID = _ROOM_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetDoctorLocations(
    IN _DOC_ID INT
)
BEGIN
	SELECT 
		L.LOC_ID, CONCAT(L.ADDRESS, ' ', L.CITY, ', ', S.CODE, ' ', L.ZIP) AS ADDRESS
    FROM 
		DOCTORLOCATIONS DL
	INNER JOIN
		LOCATIONS L
	ON
		DL.LOC_ID = L.LOC_ID
	INNER JOIN
		STATES S
	ON
		L.STATE_ID = S.STATE_ID
	WHERE
		DL.DOC_ID = _DOC_ID;
END $$
DELIMITER ;

-- DROP PROCEDURE PostDoctor;
DELIMITER $$
CREATE PROCEDURE PostDoctor(
	IN _DOC_NAME VARCHAR(30),
    IN _DOC_PHONE VARCHAR(15),
    IN _SUFFIX VARCHAR(20),
    IN _DOC_LOC_IDS	VARCHAR(500),
    IN _DOC_SPEC_IDS VARCHAR(500),
    OUT _DOC_ID INT
)
BEGIN
	INSERT INTO
		DOCTORS (DOC_NAME, DOC_PHONE, SUFFIX) 
	VALUES (_DOC_NAME, _DOC_PHONE, _SUFFIX);
    SELECT LAST_INSERT_ID() INTO _DOC_ID;
    -- EXECUTE SETDOCTORLOCATIONS
	CALL SETDOCTORLOCATIONS(_DOC_ID, _DOC_LOC_IDS);
    -- EXECUTE SETDOCTORLOCATIONS
    CALL SETDOCTORSPECIALTIES(_DOC_ID, _DOC_SPEC_IDS);
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PutDoctor(
    IN _DOC_ID INT,
	IN _DOC_NAME VARCHAR(30),
    IN _DOC_PHONE VARCHAR(15),
    IN _SUFFIX VARCHAR(20),
    IN _DOC_LOC_IDS	VARCHAR(500),
    IN _DOC_SPEC_IDS VARCHAR(500)
)
BEGIN
	UPDATE 
		DOCTORS
	SET
		DOC_NAME = _DOC_NAME, 
        DOC_PHONE = _DOC_PHONE, 
        SUFFIX = _SUFFIX
	WHERE
		DOC_ID = _DOC_ID;
    -- EXECUTE SETDOCTORLOCATIONS
	CALL SETDOCTORLOCATIONS(_DOC_ID, _DOC_LOC_IDS);
    -- EXECUTE SETDOCTORLOCATIONS
    CALL SETDOCTORSPECIALTIES(_DOC_ID, _DOC_SPEC_IDS);
END $$
DELIMITER ;

-- DROP PROCEDURE SetDoctorLocations;
DELIMITER $$
CREATE PROCEDURE SetDoctorLocations(
	IN _DOC_ID INT,
	IN _LOC_IDS VARCHAR(1000)
)
BEGIN
	IF _LOC_IDS <> '' THEN
		SET @SQL = CONCAT('DELETE FROM DOCTORLOCATIONS WHERE DOC_ID = ', _DOC_ID, ' AND LOC_ID NOT IN (', _LOC_IDS, ');');
		PREPARE STMT FROM @SQL;
		EXECUTE STMT;

		SET @SQL = CONCAT('INSERT INTO DOCTORLOCATIONS (DOC_ID, LOC_ID) SELECT ', _DOC_ID, ', L.LOC_ID FROM LOCATIONS L ',
												'LEFT JOIN DOCTORLOCATIONS DL ON L.LOC_ID = DL.LOC_ID AND DL.DOC_ID = ', _DOC_ID, 
												' WHERE L.LOC_ID IN (', _LOC_IDS, ') AND DL.DOC_LOC_ID IS NULL;');
		PREPARE STMT FROM @SQL;
		EXECUTE STMT;	
	ELSE
		DELETE FROM DOCTORLOCATIONS WHERE DOC_ID = _DOC_ID;
	END IF;
END $$
DELIMITER ;

-- DROP PROCEDURE SetDoctorSpecialties;
DELIMITER $$
CREATE PROCEDURE SetDoctorSpecialties(
	IN _DOC_ID INT,
	IN _SPEC_IDS VARCHAR(1000)
)
BEGIN
	IF _SPEC_IDS <> '' THEN
		SET @SQL = CONCAT('DELETE FROM DOCTORSPECIALTIES WHERE DOC_ID = ', _DOC_ID, ' AND SPECIALTIES_ID NOT IN (', _SPEC_IDS, ');');
		PREPARE STMT FROM @SQL;
		EXECUTE STMT;
		
		SET @SQL = CONCAT('INSERT INTO DOCTORSPECIALTIES (DOC_ID, SPECIALTIES_ID) SELECT ', _DOC_ID, ', S.SPECIALTIES_ID FROM SPECIALTIES S ',
												'LEFT JOIN DOCTORSPECIALTIES DS ON S.SPECIALTIES_ID = DS.SPECIALTIES_ID AND DS.DOC_ID = ', _DOC_ID, 
												' WHERE S.SPECIALTIES_ID IN (', _SPEC_IDS, ') AND DS.DOC_SPEC_ID IS NULL;');
		PREPARE STMT FROM @SQL;
		EXECUTE STMT;	
	ELSE
		DELETE FROM DOCTORSPECIALTIES WHERE DOC_ID = _DOC_ID;
    END IF;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetAddresses(IN _DOC_ID INT)
BEGIN
	SELECT
		LOC_ID, CONCAT(L.ADDRESS, ' ', L.CITY, ', ', S.CODE, ' ', L.ZIP) AS FULL_ADDRESS
	FROM
		LOCATIONS L
	INNER JOIN
		STATES S
	ON
		L.STATE_ID = S.STATE_ID
	WHERE
		LOC_ID NOT IN (
						SELECT
							LOC_ID
						FROM
							DOCTORLOCATIONS
						WHERE
							DOC_ID = _DOC_ID)
	ORDER BY
		LOC_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetDoctorSpecialties(
    IN _DOC_ID INT
)
BEGIN
	SELECT 
		S.SPECIALTIES_ID AS ID, SPECIALTIES_NAME AS NAME
    FROM 
		DOCTORSPECIALTIES DS
	INNER JOIN
		SPECIALTIES S
	ON
		DS.SPECIALTIES_ID = S.SPECIALTIES_ID
	WHERE
		DS.DOC_ID = _DOC_ID
	ORDER BY
		S.SPECIALTIES_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetSpecialtiesByDOCID(
	IN _DOC_ID INT
)
BEGIN
	SELECT
		SPECIALTIES_ID AS ID, SPECIALTIES_NAME AS NAME
	FROM
		SPECIALTIES
	WHERE
		SPECIALTIES_ID NOT IN (
								SELECT
									SPECIALTIES_ID
								FROM
									DOCTORSPECIALTIES 
								WHERE
									DOC_ID = _DOC_ID)
	ORDER BY
		SPECIALTIES_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetDoctors()
BEGIN
	SELECT 
		D.DOC_ID, CONCAT(D.DOC_NAME, ', ', D.SUFFIX) AS DOC_NAME, D.DOC_PHONE, A.ADDRESSES, S.SPECIALTIES
	FROM
		DOCTORS D
	LEFT JOIN (
		SELECT
			DL.DOC_ID, GROUP_CONCAT(CONCAT(L.ADDRESS, ' ', L.CITY, ', ', S.CODE, ' ', L.ZIP) SEPARATOR '<br>') AS ADDRESSES
		FROM
			DOCTORLOCATIONS DL
		INNER JOIN
			LOCATIONS L
		ON
			DL.LOC_ID = L.LOC_ID
		INNER JOIN
			STATES S
		ON
			L.STATE_ID = S.STATE_ID
		GROUP BY
			DL.DOC_ID
	)  A
	ON
		D.DOC_ID = A.DOC_ID
	LEFT JOIN (   
		SELECT 
			DS.DOC_ID, GROUP_CONCAT(SP.SPECIALTIES_NAME SEPARATOR '<br>') AS SPECIALTIES
		FROM 
			DOCTORSPECIALTIES DS
		LEFT JOIN
			SPECIALTIES SP
		ON
			DS.SPECIALTIES_ID = SP.SPECIALTIES_ID
		GROUP BY
			DS.DOC_ID
	) S
	ON
		D.DOC_ID = S.DOC_ID
	ORDER BY
		D.DOC_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetDoctor(
    IN _DOC_ID INT
)
BEGIN
	SELECT 
        DOC_ID, DOC_NAME, DOC_PHONE, SUFFIX 
    FROM 
        DOCTORS 
    WHERE 
        DOC_ID = _DOC_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetPatients()
BEGIN
	SELECT 
		P.PATIENT_ID, P.PATIENT_NAME, DATE_FORMAT(P.PATIENT_DOB, '%m/%d/%Y') AS PATIENT_DOB,  P.PHONE, 
        CONCAT(P.ADDRESS, ' ', P.CITY, ', ', S.CODE, ' ', P.ZIP) AS ADDRESS, PR.PROVIDER
    FROM
		Patients P
	INNER JOIN
		Providers PR
	ON
		P.PROVIDER_ID = PR.PROVIDER_ID
	INNER JOIN
		States S
	ON
		P.STATE_ID = S.STATE_ID
	ORDER BY
		P.PATIENT_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetPatient(IN _PATIENT_ID INT)
BEGIN
	SELECT 
		PATIENT_ID, PATIENT_NAME, PATIENT_DOB, PATIENT_BLOOD_TYPE_ID, ADDRESS, 
        CITY, STATE_ID, ZIP, PHONE, EMAIL, PROVIDER_ID, INSURANCE_ID
    FROM
		Patients
	WHERE
		PATIENT_ID = _PATIENT_ID;
END $$
DELIMITER ;


-- DROP PROCEDURE PostPatient;
DELIMITER $$
CREATE PROCEDURE PostPatient(
	IN _PATIENT_NAME VARCHAR(30),
    IN _PATIENT_DOB DATE,
    IN _PATIENT_BLOOD_TYPE_ID INT,
    IN _ADDRESS VARCHAR(30),
    IN _CITY VARCHAR(20),
    IN _STATE_ID INT,
    IN _ZIP VARCHAR(10),
    IN _PHONE VARCHAR(15),
    IN _EMAIL VARCHAR(255),
    IN _PROVIDER_ID INT,
    IN _INSURANCE_ID VARCHAR(20),
    OUT _PATIENT_ID INT
)
BEGIN
	INSERT INTO
		Patients (PATIENT_NAME, PATIENT_DOB, PATIENT_BLOOD_TYPE_ID, ADDRESS, CITY, STATE_ID, ZIP, PHONE, EMAIL, PROVIDER_ID, INSURANCE_ID)
	VALUES
		(_PATIENT_NAME, STR_TO_DATE(_PATIENT_DOB, '%Y-%m-%d'), _PATIENT_BLOOD_TYPE_ID, _ADDRESS, _CITY, _STATE_ID, _ZIP, _PHONE, _EMAIL, _PROVIDER_ID, _INSURANCE_ID);
	SELECT LAST_INSERT_ID() INTO _PATIENT_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE PutPatient(
    IN _PATIENT_ID INT,
	IN _PATIENT_NAME VARCHAR(30),
    IN _PATIENT_DOB DATE,
    IN _PATIENT_BLOOD_TYPE_ID INT,
    IN _ADDRESS VARCHAR(30),
    IN _CITY VARCHAR(20),
    IN _STATE_ID INT,
    IN _ZIP VARCHAR(10),
    IN _PHONE VARCHAR(15),
    IN _EMAIL VARCHAR(255),
    IN _PROVIDER_ID INT,
    IN _INSURANCE_ID VARCHAR(20)
)
BEGIN
	UPDATE
		Patients
	SET
		PATIENT_NAME = _PATIENT_NAME, 
        PATIENT_DOB = _PATIENT_DOB, 
        PATIENT_BLOOD_TYPE_ID =_PATIENT_BLOOD_TYPE_ID,
        ADDRESS = _ADDRESS,
        CITY = _CITY,
        STATE_ID = _STATE_ID,
        ZIP = _ZIP,
        PHONE = _PHONE,
        EMAIL = _EMAIL,
        PROVIDER_ID = _PROVIDER_ID,
        INSURANCE_ID = _INSURANCE_ID
	WHERE
		PATIENT_ID = _PATIENT_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetBloodTypes()
BEGIN
	SELECT
		BLOOD_TYPE_ID, BLOOD_TYPE_NAME
    FROM
		BloodTypes
	ORDER BY
		BLOOD_TYPE_ID ASC;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetProviders()
BEGIN
	SELECT
		PROVIDER_ID, PROVIDER
	FROM
		Providers
	ORDER BY
		PROVIDER ASC;
END $$
DELIMITER ;



DELIMITER $$
CREATE PROCEDURE GetSchedulesForStaff()
BEGIN
	SELECT
		S.SCHEDULE_ID, S.SCHEDULE_DATE, P.PATIENT_NAME, P.PATIENT_DOB, P.PHONE, 
        CONCAT(D.DOC_NAME, ', ', D.SUFFIX) AS DOC_NAME, L.LOC_NAME, R.ROOM_NUMBER
	FROM
		Schedules S
	INNER JOIN
		Patients P
	ON
		S.PATIENT_ID = P.PATIENT_ID
	INNER JOIN
		Doctors D
	ON
		S.DOC_ID = D.DOC_ID
	INNER JOIN
		Rooms R
	ON
		S.ROOM_ID = R.ROOM_ID
	INNER JOIN
		Locations L
	ON
		R.LOC_ID = L.LOC_ID;
END $$
DELIMITER ;


-- DROP PROCEDURE GetSchedules;
DELIMITER $$
CREATE PROCEDURE GetSchedules()
BEGIN
	SELECT
		S.SCHEDULE_ID, DATE_FORMAT(S.SCHEDULE_DATE, '%m/%d/%Y') AS SCHEDULE_DATE, 
        DATE_FORMAT(S.SCHEDULE_TIME, '%h:%i %p') AS SCHEDULE_TIME, P.PATIENT_NAME, 
        DATE_FORMAT(P.PATIENT_DOB, '%m/%d/%Y') AS PATIENT_DOB, P.PHONE, 
        CONCAT(D.DOC_NAME, ', ', D.SUFFIX) AS DOC_NAME, L.LOC_NAME, R.ROOM_NUMBER
	FROM
		Schedules S
	INNER JOIN
		Patients P
	ON
		S.PATIENT_ID = P.PATIENT_ID
	INNER JOIN
		Doctors D
	ON
		S.DOC_ID = D.DOC_ID
	INNER JOIN
		Rooms R
	ON
		S.ROOM_ID = R.ROOM_ID
	INNER JOIN
		Locations L
	ON
		R.LOC_ID = L.LOC_ID;
END $$
DELIMITER ;

-- drop PROCEDURE GetSchedule;
DELIMITER $$
CREATE PROCEDURE GetSchedule(IN _SCHEDULE_ID INT)
BEGIN
	SELECT
		S.SCHEDULE_ID, S.SCHEDULE_DATE, S.SCHEDULE_TIME, P.PATIENT_ID, P.PATIENT_NAME, P.PATIENT_DOB,
        P.PHONE, D.DOC_ID, D.DOC_NAME, L.LOC_ID, S.ROOM_ID, S.SCHEDULE_NOTES
	FROM
		Schedules S
	INNER JOIN
		Patients P
	ON
		S.PATIENT_ID = P.PATIENT_ID
	INNER JOIN
		Doctors D
	ON
		S.DOC_ID = D.DOC_ID
	INNER JOIN
		Rooms R
	ON
		S.ROOM_ID = R.ROOM_ID
	INNER JOIN
		Locations L
	ON
		R.LOC_ID = L.LOC_ID
	WHERE
		SCHEDULE_ID = _SCHEDULE_ID;
END $$
DELIMITER ;

-- DROP PROCEDURE PostSchedule;
DELIMITER $$
CREATE PROCEDURE PostSchedule(
	IN _PATIENT_ID INT,
    IN _DOC_ID INT,
	IN _SCHEDULE_DATE VARCHAR(20),
    IN _SCHEDULE_TIME VARCHAR(10),
    IN _ROOM_ID INT,
    IN _SCHEDULE_NOTES VARCHAR(2000),
    OUT _RES INT
)
BEGIN
	SET SQL_MODE = ''; 
	INSERT INTO
		Schedules (PATIENT_ID, DOC_ID, SCHEDULE_DATE, SCHEDULE_TIME, ROOM_ID, SCHEDULE_NOTES)
	VALUES
		(_PATIENT_ID, _DOC_ID, STR_TO_DATE(_SCHEDULE_DATE, '%Y-%m-%d'), STR_TO_DATE(_SCHEDULE_TIME, '%H:%i'), _ROOM_ID, _SCHEDULE_NOTES);
	SELECT LAST_INSERT_ID() INTO _RES;
END $$
DELIMITER ;

-- DROP PROCEDURE PutSchedule;
DELIMITER $$
CREATE PROCEDURE PutSchedule(
	IN _SCHEDULE_ID INT,
	IN _PATIENT_ID INT,
    IN _DOC_ID INT,
	IN _SCHEDULE_DATE VARCHAR(20),
    IN _SCHEDULE_TIME VARCHAR(10),
    IN _ROOM_ID INT,
    IN _SCHEDULE_NOTES VARCHAR(2000)
)
BEGIN
	SET SQL_MODE = ''; 
	UPDATE
		Schedules
	SET
		PATIENT_ID = _PATIENT_ID,
        DOC_ID = _DOC_ID,
        SCHEDULE_DATE = STR_TO_DATE(_SCHEDULE_DATE, '%Y-%m-%d'),
        SCHEDULE_TIME = STR_TO_DATE(_SCHEDULE_TIME, '%H:%i'),
        ROOM_ID = _ROOM_ID,
        SCHEDULE_NOTES = _SCHEDULE_NOTES
	WHERE
		SCHEDULE_ID = _SCHEDULE_ID;
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetSchedulesForPatient(IN _ID INT)
BEGIN
	SELECT
		S.SCHEDULE_ID, S.SCHEDULE_DATE, P.PATIENT_NAME, P.PATIENT_DOB, P.PHONE, 
        CONCAT(D.DOC_NAME, ', ', D.SUFFIX) AS DOC_NAME, L.LOC_NAME, R.ROOM_NUMBER
	FROM
		Schedules S
	INNER JOIN
		Patients P
	ON
		S.PATIENT_ID = P.PATIENT_ID
	INNER JOIN
		Doctors D
	ON
		S.DOC_ID = D.DOC_ID
	INNER JOIN
		Rooms R
	ON
		S.ROOM_ID = R.ROOM_ID
	INNER JOIN
		Locations L
	ON
		R.LOC_ID = L.LOC_ID
	WHERE
		P.PATIENT_ID = _ID;
END $$
DELIMITER ;


-- DROP PROCEDURE GetPatientByName;
DELIMITER $$
CREATE PROCEDURE GetPatientByName(IN _NAME VARCHAR(30))
BEGIN
	SELECT
		PATIENT_ID, PATIENT_NAME, PATIENT_DOB, 
        CONCAT(PATIENT_NAME, ' (', DATE_FORMAT(PATIENT_DOB, '%m/%d/%Y'), ')') AS LABEL, PHONE
	FROM
		Patients
	WHERE
		PATIENT_NAME LIKE CONCAT('%',  _NAME, '%');
END $$
DELIMITER ;


-- DROP PROCEDURE GetPatientByPhone;
DELIMITER $$
CREATE PROCEDURE GetPatientByPhone(IN _PHONE VARCHAR(15))
BEGIN
	SELECT
		PATIENT_ID, PATIENT_NAME, PATIENT_DOB, CONCAT(PHONE, ' (', PATIENT_NAME, ')') AS LABEL, PHONE
	FROM
		Patients
	WHERE
		PHONE LIKE CONCAT('%',  _PHONE, '%');
END $$
DELIMITER ;


-- drop PROCEDURE GetDoctorByName;
DELIMITER $$
CREATE PROCEDURE GetDoctorByName(IN _NAME VARCHAR(30))
BEGIN
	SELECT
		DOC_ID, CONCAT(DOC_NAME, ', ', SUFFIX, ' ', DOC_PHONE) AS LABEL, DOC_NAME
	FROM
		Doctors
	WHERE
		DOC_NAME LIKE CONCAT('%',  _NAME, '%');
END $$
DELIMITER ;


DELIMITER $$
CREATE PROCEDURE GetRoomsByLocID(IN _LOC_ID INT)
BEGIN
	SELECT
		ROOM_ID, ROOM_NUMBER
	FROM
		Rooms
	WHERE 
		LOC_ID = _LOC_ID
	ORDER BY
		ROOM_NUMBER ASC;
END $$
DELIMITER ;

